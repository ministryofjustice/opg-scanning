// Code generated by mockery. DO NOT EDIT.

package api

import (
	context "context"

	sirius "github.com/ministryofjustice/opg-scanning/internal/sirius"
	mock "github.com/stretchr/testify/mock"
)

// mockSiriusClient is an autogenerated mock type for the SiriusClient type
type mockSiriusClient struct {
	mock.Mock
}

type mockSiriusClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSiriusClient) EXPECT() *mockSiriusClient_Expecter {
	return &mockSiriusClient_Expecter{mock: &_m.Mock}
}

// AttachDocument provides a mock function with given fields: ctx, data
func (_m *mockSiriusClient) AttachDocument(ctx context.Context, data *sirius.ScannedDocumentRequest) (*sirius.ScannedDocumentResponse, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for AttachDocument")
	}

	var r0 *sirius.ScannedDocumentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirius.ScannedDocumentRequest) (*sirius.ScannedDocumentResponse, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirius.ScannedDocumentRequest) *sirius.ScannedDocumentResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirius.ScannedDocumentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirius.ScannedDocumentRequest) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSiriusClient_AttachDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachDocument'
type mockSiriusClient_AttachDocument_Call struct {
	*mock.Call
}

// AttachDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - data *sirius.ScannedDocumentRequest
func (_e *mockSiriusClient_Expecter) AttachDocument(ctx interface{}, data interface{}) *mockSiriusClient_AttachDocument_Call {
	return &mockSiriusClient_AttachDocument_Call{Call: _e.mock.On("AttachDocument", ctx, data)}
}

func (_c *mockSiriusClient_AttachDocument_Call) Run(run func(ctx context.Context, data *sirius.ScannedDocumentRequest)) *mockSiriusClient_AttachDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sirius.ScannedDocumentRequest))
	})
	return _c
}

func (_c *mockSiriusClient_AttachDocument_Call) Return(_a0 *sirius.ScannedDocumentResponse, _a1 error) *mockSiriusClient_AttachDocument_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSiriusClient_AttachDocument_Call) RunAndReturn(run func(context.Context, *sirius.ScannedDocumentRequest) (*sirius.ScannedDocumentResponse, error)) *mockSiriusClient_AttachDocument_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCaseStub provides a mock function with given fields: ctx, data
func (_m *mockSiriusClient) CreateCaseStub(ctx context.Context, data *sirius.ScannedCaseRequest) (*sirius.ScannedCaseResponse, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateCaseStub")
	}

	var r0 *sirius.ScannedCaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sirius.ScannedCaseRequest) (*sirius.ScannedCaseResponse, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sirius.ScannedCaseRequest) *sirius.ScannedCaseResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirius.ScannedCaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sirius.ScannedCaseRequest) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSiriusClient_CreateCaseStub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCaseStub'
type mockSiriusClient_CreateCaseStub_Call struct {
	*mock.Call
}

// CreateCaseStub is a helper method to define mock.On call
//   - ctx context.Context
//   - data *sirius.ScannedCaseRequest
func (_e *mockSiriusClient_Expecter) CreateCaseStub(ctx interface{}, data interface{}) *mockSiriusClient_CreateCaseStub_Call {
	return &mockSiriusClient_CreateCaseStub_Call{Call: _e.mock.On("CreateCaseStub", ctx, data)}
}

func (_c *mockSiriusClient_CreateCaseStub_Call) Run(run func(ctx context.Context, data *sirius.ScannedCaseRequest)) *mockSiriusClient_CreateCaseStub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sirius.ScannedCaseRequest))
	})
	return _c
}

func (_c *mockSiriusClient_CreateCaseStub_Call) Return(_a0 *sirius.ScannedCaseResponse, _a1 error) *mockSiriusClient_CreateCaseStub_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSiriusClient_CreateCaseStub_Call) RunAndReturn(run func(context.Context, *sirius.ScannedCaseRequest) (*sirius.ScannedCaseResponse, error)) *mockSiriusClient_CreateCaseStub_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSiriusClient creates a new instance of mockSiriusClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSiriusClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSiriusClient {
	mock := &mockSiriusClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
