// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// newMockTokens creates a new instance of mockTokens. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTokens(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTokens {
	mock := &mockTokens{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockTokens is an autogenerated mock type for the tokens type
type mockTokens struct {
	mock.Mock
}

type mockTokens_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTokens) EXPECT() *mockTokens_Expecter {
	return &mockTokens_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type mockTokens
func (_mock *mockTokens) Generate() (string, time.Time, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if returnFunc, ok := ret.Get(0).(func() (string, time.Time, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() time.Time); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(time.Time)
	}
	if returnFunc, ok := ret.Get(2).(func() error); ok {
		r2 = returnFunc()
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mockTokens_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type mockTokens_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
func (_e *mockTokens_Expecter) Generate() *mockTokens_Generate_Call {
	return &mockTokens_Generate_Call{Call: _e.mock.On("Generate")}
}

func (_c *mockTokens_Generate_Call) Run(run func()) *mockTokens_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockTokens_Generate_Call) Return(s string, time1 time.Time, err error) *mockTokens_Generate_Call {
	_c.Call.Return(s, time1, err)
	return _c
}

func (_c *mockTokens_Generate_Call) RunAndReturn(run func() (string, time.Time, error)) *mockTokens_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type mockTokens
func (_mock *mockTokens) Validate(s string) error {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockTokens_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type mockTokens_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - s string
func (_e *mockTokens_Expecter) Validate(s interface{}) *mockTokens_Validate_Call {
	return &mockTokens_Validate_Call{Call: _e.mock.On("Validate", s)}
}

func (_c *mockTokens_Validate_Call) Run(run func(s string)) *mockTokens_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockTokens_Validate_Call) Return(err error) *mockTokens_Validate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockTokens_Validate_Call) RunAndReturn(run func(s string) error) *mockTokens_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCredentialsClient creates a new instance of mockCredentialsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCredentialsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCredentialsClient {
	mock := &mockCredentialsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockCredentialsClient is an autogenerated mock type for the credentialsClient type
type mockCredentialsClient struct {
	mock.Mock
}

type mockCredentialsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCredentialsClient) EXPECT() *mockCredentialsClient_Expecter {
	return &mockCredentialsClient_Expecter{mock: &_m.Mock}
}

// FetchCredentials provides a mock function for the type mockCredentialsClient
func (_mock *mockCredentialsClient) FetchCredentials(ctx context.Context) (map[string]string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchCredentials")
	}

	var r0 map[string]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (map[string]string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) map[string]string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockCredentialsClient_FetchCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchCredentials'
type mockCredentialsClient_FetchCredentials_Call struct {
	*mock.Call
}

// FetchCredentials is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockCredentialsClient_Expecter) FetchCredentials(ctx interface{}) *mockCredentialsClient_FetchCredentials_Call {
	return &mockCredentialsClient_FetchCredentials_Call{Call: _e.mock.On("FetchCredentials", ctx)}
}

func (_c *mockCredentialsClient_FetchCredentials_Call) Run(run func(ctx context.Context)) *mockCredentialsClient_FetchCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockCredentialsClient_FetchCredentials_Call) Return(stringToString map[string]string, err error) *mockCredentialsClient_FetchCredentials_Call {
	_c.Call.Return(stringToString, err)
	return _c
}

func (_c *mockCredentialsClient_FetchCredentials_Call) RunAndReturn(run func(ctx context.Context) (map[string]string, error)) *mockCredentialsClient_FetchCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSecretsClient creates a new instance of mockSecretsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSecretsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSecretsClient {
	mock := &mockSecretsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockSecretsClient is an autogenerated mock type for the secretsClient type
type mockSecretsClient struct {
	mock.Mock
}

type mockSecretsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSecretsClient) EXPECT() *mockSecretsClient_Expecter {
	return &mockSecretsClient_Expecter{mock: &_m.Mock}
}

// GetSecretValue provides a mock function for the type mockSecretsClient
func (_mock *mockSecretsClient) GetSecretValue(ctx context.Context, secretName string) (string, error) {
	ret := _mock.Called(ctx, secretName)

	if len(ret) == 0 {
		panic("no return value specified for GetSecretValue")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, secretName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, secretName)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, secretName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockSecretsClient_GetSecretValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecretValue'
type mockSecretsClient_GetSecretValue_Call struct {
	*mock.Call
}

// GetSecretValue is a helper method to define mock.On call
//   - ctx context.Context
//   - secretName string
func (_e *mockSecretsClient_Expecter) GetSecretValue(ctx interface{}, secretName interface{}) *mockSecretsClient_GetSecretValue_Call {
	return &mockSecretsClient_GetSecretValue_Call{Call: _e.mock.On("GetSecretValue", ctx, secretName)}
}

func (_c *mockSecretsClient_GetSecretValue_Call) Run(run func(ctx context.Context, secretName string)) *mockSecretsClient_GetSecretValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockSecretsClient_GetSecretValue_Call) Return(s string, err error) *mockSecretsClient_GetSecretValue_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *mockSecretsClient_GetSecretValue_Call) RunAndReturn(run func(ctx context.Context, secretName string) (string, error)) *mockSecretsClient_GetSecretValue_Call {
	_c.Call.Return(run)
	return _c
}
