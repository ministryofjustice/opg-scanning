// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sirius

import (
	"context"
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// newMockDoer creates a new instance of mockDoer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDoer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDoer {
	mock := &mockDoer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockDoer is an autogenerated mock type for the doer type
type mockDoer struct {
	mock.Mock
}

type mockDoer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDoer) EXPECT() *mockDoer_Expecter {
	return &mockDoer_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type mockDoer
func (_mock *mockDoer) Do(request *http.Request) (*http.Response, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockDoer_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type mockDoer_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - request *http.Request
func (_e *mockDoer_Expecter) Do(request interface{}) *mockDoer_Do_Call {
	return &mockDoer_Do_Call{Call: _e.mock.On("Do", request)}
}

func (_c *mockDoer_Do_Call) Run(run func(request *http.Request)) *mockDoer_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockDoer_Do_Call) Return(response *http.Response, err error) *mockDoer_Do_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *mockDoer_Do_Call) RunAndReturn(run func(request *http.Request) (*http.Response, error)) *mockDoer_Do_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSiriusClient creates a new instance of mockSiriusClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSiriusClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSiriusClient {
	mock := &mockSiriusClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockSiriusClient is an autogenerated mock type for the siriusClient type
type mockSiriusClient struct {
	mock.Mock
}

type mockSiriusClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSiriusClient) EXPECT() *mockSiriusClient_Expecter {
	return &mockSiriusClient_Expecter{mock: &_m.Mock}
}

// AttachDocument provides a mock function for the type mockSiriusClient
func (_mock *mockSiriusClient) AttachDocument(ctx context.Context, data *ScannedDocumentRequest) (*ScannedDocumentResponse, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for AttachDocument")
	}

	var r0 *ScannedDocumentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ScannedDocumentRequest) (*ScannedDocumentResponse, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ScannedDocumentRequest) *ScannedDocumentResponse); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScannedDocumentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ScannedDocumentRequest) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockSiriusClient_AttachDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachDocument'
type mockSiriusClient_AttachDocument_Call struct {
	*mock.Call
}

// AttachDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - data *ScannedDocumentRequest
func (_e *mockSiriusClient_Expecter) AttachDocument(ctx interface{}, data interface{}) *mockSiriusClient_AttachDocument_Call {
	return &mockSiriusClient_AttachDocument_Call{Call: _e.mock.On("AttachDocument", ctx, data)}
}

func (_c *mockSiriusClient_AttachDocument_Call) Run(run func(ctx context.Context, data *ScannedDocumentRequest)) *mockSiriusClient_AttachDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ScannedDocumentRequest
		if args[1] != nil {
			arg1 = args[1].(*ScannedDocumentRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockSiriusClient_AttachDocument_Call) Return(scannedDocumentResponse *ScannedDocumentResponse, err error) *mockSiriusClient_AttachDocument_Call {
	_c.Call.Return(scannedDocumentResponse, err)
	return _c
}

func (_c *mockSiriusClient_AttachDocument_Call) RunAndReturn(run func(ctx context.Context, data *ScannedDocumentRequest) (*ScannedDocumentResponse, error)) *mockSiriusClient_AttachDocument_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCaseStub provides a mock function for the type mockSiriusClient
func (_mock *mockSiriusClient) CreateCaseStub(ctx context.Context, data *ScannedCaseRequest) (*ScannedCaseResponse, error) {
	ret := _mock.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateCaseStub")
	}

	var r0 *ScannedCaseResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ScannedCaseRequest) (*ScannedCaseResponse, error)); ok {
		return returnFunc(ctx, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ScannedCaseRequest) *ScannedCaseResponse); ok {
		r0 = returnFunc(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ScannedCaseResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ScannedCaseRequest) error); ok {
		r1 = returnFunc(ctx, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockSiriusClient_CreateCaseStub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCaseStub'
type mockSiriusClient_CreateCaseStub_Call struct {
	*mock.Call
}

// CreateCaseStub is a helper method to define mock.On call
//   - ctx context.Context
//   - data *ScannedCaseRequest
func (_e *mockSiriusClient_Expecter) CreateCaseStub(ctx interface{}, data interface{}) *mockSiriusClient_CreateCaseStub_Call {
	return &mockSiriusClient_CreateCaseStub_Call{Call: _e.mock.On("CreateCaseStub", ctx, data)}
}

func (_c *mockSiriusClient_CreateCaseStub_Call) Run(run func(ctx context.Context, data *ScannedCaseRequest)) *mockSiriusClient_CreateCaseStub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ScannedCaseRequest
		if args[1] != nil {
			arg1 = args[1].(*ScannedCaseRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockSiriusClient_CreateCaseStub_Call) Return(scannedCaseResponse *ScannedCaseResponse, err error) *mockSiriusClient_CreateCaseStub_Call {
	_c.Call.Return(scannedCaseResponse, err)
	return _c
}

func (_c *mockSiriusClient_CreateCaseStub_Call) RunAndReturn(run func(ctx context.Context, data *ScannedCaseRequest) (*ScannedCaseResponse, error)) *mockSiriusClient_CreateCaseStub_Call {
	_c.Call.Return(run)
	return _c
}
