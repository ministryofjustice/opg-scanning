// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package api

import (
	"context"
	"io"
	"net/http"

	"github.com/ministryofjustice/opg-scanning/internal/auth"
	"github.com/ministryofjustice/opg-scanning/internal/sirius"
	"github.com/ministryofjustice/opg-scanning/internal/types"
	mock "github.com/stretchr/testify/mock"
)

// newMockAuth creates a new instance of mockAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAuth {
	mock := &mockAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockAuth is an autogenerated mock type for the Auth type
type mockAuth struct {
	mock.Mock
}

type mockAuth_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAuth) EXPECT() *mockAuth_Expecter {
	return &mockAuth_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type mockAuth
func (_mock *mockAuth) Authenticate(w http.ResponseWriter, r *http.Request) (auth.AuthenticatedUser, error) {
	ret := _mock.Called(w, r)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 auth.AuthenticatedUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) (auth.AuthenticatedUser, error)); ok {
		return returnFunc(w, r)
	}
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request) auth.AuthenticatedUser); ok {
		r0 = returnFunc(w, r)
	} else {
		r0 = ret.Get(0).(auth.AuthenticatedUser)
	}
	if returnFunc, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request) error); ok {
		r1 = returnFunc(w, r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockAuth_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type mockAuth_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *mockAuth_Expecter) Authenticate(w interface{}, r interface{}) *mockAuth_Authenticate_Call {
	return &mockAuth_Authenticate_Call{Call: _e.mock.On("Authenticate", w, r)}
}

func (_c *mockAuth_Authenticate_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *mockAuth_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockAuth_Authenticate_Call) Return(authenticatedUser auth.AuthenticatedUser, err error) *mockAuth_Authenticate_Call {
	_c.Call.Return(authenticatedUser, err)
	return _c
}

func (_c *mockAuth_Authenticate_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request) (auth.AuthenticatedUser, error)) *mockAuth_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Check provides a mock function for the type mockAuth
func (_mock *mockAuth) Check(next http.Handler) http.HandlerFunc {
	ret := _mock.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 http.HandlerFunc
	if returnFunc, ok := ret.Get(0).(func(http.Handler) http.HandlerFunc); ok {
		r0 = returnFunc(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}
	return r0
}

// mockAuth_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type mockAuth_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - next http.Handler
func (_e *mockAuth_Expecter) Check(next interface{}) *mockAuth_Check_Call {
	return &mockAuth_Check_Call{Call: _e.mock.On("Check", next)}
}

func (_c *mockAuth_Check_Call) Run(run func(next http.Handler)) *mockAuth_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.Handler
		if args[0] != nil {
			arg0 = args[0].(http.Handler)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockAuth_Check_Call) Return(handlerFunc http.HandlerFunc) *mockAuth_Check_Call {
	_c.Call.Return(handlerFunc)
	return _c
}

func (_c *mockAuth_Check_Call) RunAndReturn(run func(next http.Handler) http.HandlerFunc) *mockAuth_Check_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAwsClient creates a new instance of mockAwsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAwsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAwsClient {
	mock := &mockAwsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockAwsClient is an autogenerated mock type for the AwsClient type
type mockAwsClient struct {
	mock.Mock
}

type mockAwsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAwsClient) EXPECT() *mockAwsClient_Expecter {
	return &mockAwsClient_Expecter{mock: &_m.Mock}
}

// PersistFormData provides a mock function for the type mockAwsClient
func (_mock *mockAwsClient) PersistFormData(ctx context.Context, body io.Reader, docType string) (string, error) {
	ret := _mock.Called(ctx, body, docType)

	if len(ret) == 0 {
		panic("no return value specified for PersistFormData")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Reader, string) (string, error)); ok {
		return returnFunc(ctx, body, docType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Reader, string) string); ok {
		r0 = returnFunc(ctx, body, docType)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, io.Reader, string) error); ok {
		r1 = returnFunc(ctx, body, docType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockAwsClient_PersistFormData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PersistFormData'
type mockAwsClient_PersistFormData_Call struct {
	*mock.Call
}

// PersistFormData is a helper method to define mock.On call
//   - ctx context.Context
//   - body io.Reader
//   - docType string
func (_e *mockAwsClient_Expecter) PersistFormData(ctx interface{}, body interface{}, docType interface{}) *mockAwsClient_PersistFormData_Call {
	return &mockAwsClient_PersistFormData_Call{Call: _e.mock.On("PersistFormData", ctx, body, docType)}
}

func (_c *mockAwsClient_PersistFormData_Call) Run(run func(ctx context.Context, body io.Reader, docType string)) *mockAwsClient_PersistFormData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 io.Reader
		if args[1] != nil {
			arg1 = args[1].(io.Reader)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockAwsClient_PersistFormData_Call) Return(s string, err error) *mockAwsClient_PersistFormData_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *mockAwsClient_PersistFormData_Call) RunAndReturn(run func(ctx context.Context, body io.Reader, docType string) (string, error)) *mockAwsClient_PersistFormData_Call {
	_c.Call.Return(run)
	return _c
}

// PersistSetData provides a mock function for the type mockAwsClient
func (_mock *mockAwsClient) PersistSetData(ctx context.Context, body []byte) (string, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for PersistSetData")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) (string, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) string); ok {
		r0 = returnFunc(ctx, body)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockAwsClient_PersistSetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PersistSetData'
type mockAwsClient_PersistSetData_Call struct {
	*mock.Call
}

// PersistSetData is a helper method to define mock.On call
//   - ctx context.Context
//   - body []byte
func (_e *mockAwsClient_Expecter) PersistSetData(ctx interface{}, body interface{}) *mockAwsClient_PersistSetData_Call {
	return &mockAwsClient_PersistSetData_Call{Call: _e.mock.On("PersistSetData", ctx, body)}
}

func (_c *mockAwsClient_PersistSetData_Call) Run(run func(ctx context.Context, body []byte)) *mockAwsClient_PersistSetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockAwsClient_PersistSetData_Call) Return(s string, err error) *mockAwsClient_PersistSetData_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *mockAwsClient_PersistSetData_Call) RunAndReturn(run func(ctx context.Context, body []byte) (string, error)) *mockAwsClient_PersistSetData_Call {
	_c.Call.Return(run)
	return _c
}

// QueueSetForProcessing provides a mock function for the type mockAwsClient
func (_mock *mockAwsClient) QueueSetForProcessing(ctx context.Context, scannedCaseResponse *sirius.ScannedCaseResponse, fileName string) (string, error) {
	ret := _mock.Called(ctx, scannedCaseResponse, fileName)

	if len(ret) == 0 {
		panic("no return value specified for QueueSetForProcessing")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sirius.ScannedCaseResponse, string) (string, error)); ok {
		return returnFunc(ctx, scannedCaseResponse, fileName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sirius.ScannedCaseResponse, string) string); ok {
		r0 = returnFunc(ctx, scannedCaseResponse, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sirius.ScannedCaseResponse, string) error); ok {
		r1 = returnFunc(ctx, scannedCaseResponse, fileName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockAwsClient_QueueSetForProcessing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueSetForProcessing'
type mockAwsClient_QueueSetForProcessing_Call struct {
	*mock.Call
}

// QueueSetForProcessing is a helper method to define mock.On call
//   - ctx context.Context
//   - scannedCaseResponse *sirius.ScannedCaseResponse
//   - fileName string
func (_e *mockAwsClient_Expecter) QueueSetForProcessing(ctx interface{}, scannedCaseResponse interface{}, fileName interface{}) *mockAwsClient_QueueSetForProcessing_Call {
	return &mockAwsClient_QueueSetForProcessing_Call{Call: _e.mock.On("QueueSetForProcessing", ctx, scannedCaseResponse, fileName)}
}

func (_c *mockAwsClient_QueueSetForProcessing_Call) Run(run func(ctx context.Context, scannedCaseResponse *sirius.ScannedCaseResponse, fileName string)) *mockAwsClient_QueueSetForProcessing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sirius.ScannedCaseResponse
		if args[1] != nil {
			arg1 = args[1].(*sirius.ScannedCaseResponse)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockAwsClient_QueueSetForProcessing_Call) Return(s string, err error) *mockAwsClient_QueueSetForProcessing_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *mockAwsClient_QueueSetForProcessing_Call) RunAndReturn(run func(ctx context.Context, scannedCaseResponse *sirius.ScannedCaseResponse, fileName string) (string, error)) *mockAwsClient_QueueSetForProcessing_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDocumentTracker creates a new instance of mockDocumentTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDocumentTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDocumentTracker {
	mock := &mockDocumentTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockDocumentTracker is an autogenerated mock type for the documentTracker type
type mockDocumentTracker struct {
	mock.Mock
}

type mockDocumentTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDocumentTracker) EXPECT() *mockDocumentTracker_Expecter {
	return &mockDocumentTracker_Expecter{mock: &_m.Mock}
}

// SetCompleted provides a mock function for the type mockDocumentTracker
func (_mock *mockDocumentTracker) SetCompleted(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SetCompleted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockDocumentTracker_SetCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompleted'
type mockDocumentTracker_SetCompleted_Call struct {
	*mock.Call
}

// SetCompleted is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *mockDocumentTracker_Expecter) SetCompleted(ctx interface{}, id interface{}) *mockDocumentTracker_SetCompleted_Call {
	return &mockDocumentTracker_SetCompleted_Call{Call: _e.mock.On("SetCompleted", ctx, id)}
}

func (_c *mockDocumentTracker_SetCompleted_Call) Run(run func(ctx context.Context, id string)) *mockDocumentTracker_SetCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockDocumentTracker_SetCompleted_Call) Return(err error) *mockDocumentTracker_SetCompleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockDocumentTracker_SetCompleted_Call) RunAndReturn(run func(ctx context.Context, id string) error) *mockDocumentTracker_SetCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// SetFailed provides a mock function for the type mockDocumentTracker
func (_mock *mockDocumentTracker) SetFailed(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SetFailed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockDocumentTracker_SetFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFailed'
type mockDocumentTracker_SetFailed_Call struct {
	*mock.Call
}

// SetFailed is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *mockDocumentTracker_Expecter) SetFailed(ctx interface{}, id interface{}) *mockDocumentTracker_SetFailed_Call {
	return &mockDocumentTracker_SetFailed_Call{Call: _e.mock.On("SetFailed", ctx, id)}
}

func (_c *mockDocumentTracker_SetFailed_Call) Run(run func(ctx context.Context, id string)) *mockDocumentTracker_SetFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockDocumentTracker_SetFailed_Call) Return(err error) *mockDocumentTracker_SetFailed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockDocumentTracker_SetFailed_Call) RunAndReturn(run func(ctx context.Context, id string) error) *mockDocumentTracker_SetFailed_Call {
	_c.Call.Return(run)
	return _c
}

// SetProcessing provides a mock function for the type mockDocumentTracker
func (_mock *mockDocumentTracker) SetProcessing(ctx context.Context, id string, caseNo string) error {
	ret := _mock.Called(ctx, id, caseNo)

	if len(ret) == 0 {
		panic("no return value specified for SetProcessing")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, caseNo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// mockDocumentTracker_SetProcessing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProcessing'
type mockDocumentTracker_SetProcessing_Call struct {
	*mock.Call
}

// SetProcessing is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - caseNo string
func (_e *mockDocumentTracker_Expecter) SetProcessing(ctx interface{}, id interface{}, caseNo interface{}) *mockDocumentTracker_SetProcessing_Call {
	return &mockDocumentTracker_SetProcessing_Call{Call: _e.mock.On("SetProcessing", ctx, id, caseNo)}
}

func (_c *mockDocumentTracker_SetProcessing_Call) Run(run func(ctx context.Context, id string, caseNo string)) *mockDocumentTracker_SetProcessing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *mockDocumentTracker_SetProcessing_Call) Return(err error) *mockDocumentTracker_SetProcessing_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockDocumentTracker_SetProcessing_Call) RunAndReturn(run func(ctx context.Context, id string, caseNo string) error) *mockDocumentTracker_SetProcessing_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSiriusService creates a new instance of mockSiriusService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSiriusService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSiriusService {
	mock := &mockSiriusService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockSiriusService is an autogenerated mock type for the siriusService type
type mockSiriusService struct {
	mock.Mock
}

type mockSiriusService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSiriusService) EXPECT() *mockSiriusService_Expecter {
	return &mockSiriusService_Expecter{mock: &_m.Mock}
}

// AttachDocuments provides a mock function for the type mockSiriusService
func (_mock *mockSiriusService) AttachDocuments(ctx context.Context, set *types.BaseSet, originalDoc *types.BaseDocument, caseResponse *sirius.ScannedCaseResponse) (*sirius.ScannedDocumentResponse, []byte, error) {
	ret := _mock.Called(ctx, set, originalDoc, caseResponse)

	if len(ret) == 0 {
		panic("no return value specified for AttachDocuments")
	}

	var r0 *sirius.ScannedDocumentResponse
	var r1 []byte
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.BaseSet, *types.BaseDocument, *sirius.ScannedCaseResponse) (*sirius.ScannedDocumentResponse, []byte, error)); ok {
		return returnFunc(ctx, set, originalDoc, caseResponse)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.BaseSet, *types.BaseDocument, *sirius.ScannedCaseResponse) *sirius.ScannedDocumentResponse); ok {
		r0 = returnFunc(ctx, set, originalDoc, caseResponse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirius.ScannedDocumentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.BaseSet, *types.BaseDocument, *sirius.ScannedCaseResponse) []byte); ok {
		r1 = returnFunc(ctx, set, originalDoc, caseResponse)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *types.BaseSet, *types.BaseDocument, *sirius.ScannedCaseResponse) error); ok {
		r2 = returnFunc(ctx, set, originalDoc, caseResponse)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// mockSiriusService_AttachDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachDocuments'
type mockSiriusService_AttachDocuments_Call struct {
	*mock.Call
}

// AttachDocuments is a helper method to define mock.On call
//   - ctx context.Context
//   - set *types.BaseSet
//   - originalDoc *types.BaseDocument
//   - caseResponse *sirius.ScannedCaseResponse
func (_e *mockSiriusService_Expecter) AttachDocuments(ctx interface{}, set interface{}, originalDoc interface{}, caseResponse interface{}) *mockSiriusService_AttachDocuments_Call {
	return &mockSiriusService_AttachDocuments_Call{Call: _e.mock.On("AttachDocuments", ctx, set, originalDoc, caseResponse)}
}

func (_c *mockSiriusService_AttachDocuments_Call) Run(run func(ctx context.Context, set *types.BaseSet, originalDoc *types.BaseDocument, caseResponse *sirius.ScannedCaseResponse)) *mockSiriusService_AttachDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.BaseSet
		if args[1] != nil {
			arg1 = args[1].(*types.BaseSet)
		}
		var arg2 *types.BaseDocument
		if args[2] != nil {
			arg2 = args[2].(*types.BaseDocument)
		}
		var arg3 *sirius.ScannedCaseResponse
		if args[3] != nil {
			arg3 = args[3].(*sirius.ScannedCaseResponse)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *mockSiriusService_AttachDocuments_Call) Return(scannedDocumentResponse *sirius.ScannedDocumentResponse, bytes []byte, err error) *mockSiriusService_AttachDocuments_Call {
	_c.Call.Return(scannedDocumentResponse, bytes, err)
	return _c
}

func (_c *mockSiriusService_AttachDocuments_Call) RunAndReturn(run func(ctx context.Context, set *types.BaseSet, originalDoc *types.BaseDocument, caseResponse *sirius.ScannedCaseResponse) (*sirius.ScannedDocumentResponse, []byte, error)) *mockSiriusService_AttachDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCaseStub provides a mock function for the type mockSiriusService
func (_mock *mockSiriusService) CreateCaseStub(ctx context.Context, set *types.BaseSet) (*sirius.ScannedCaseResponse, error) {
	ret := _mock.Called(ctx, set)

	if len(ret) == 0 {
		panic("no return value specified for CreateCaseStub")
	}

	var r0 *sirius.ScannedCaseResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.BaseSet) (*sirius.ScannedCaseResponse, error)); ok {
		return returnFunc(ctx, set)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *types.BaseSet) *sirius.ScannedCaseResponse); ok {
		r0 = returnFunc(ctx, set)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sirius.ScannedCaseResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *types.BaseSet) error); ok {
		r1 = returnFunc(ctx, set)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// mockSiriusService_CreateCaseStub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCaseStub'
type mockSiriusService_CreateCaseStub_Call struct {
	*mock.Call
}

// CreateCaseStub is a helper method to define mock.On call
//   - ctx context.Context
//   - set *types.BaseSet
func (_e *mockSiriusService_Expecter) CreateCaseStub(ctx interface{}, set interface{}) *mockSiriusService_CreateCaseStub_Call {
	return &mockSiriusService_CreateCaseStub_Call{Call: _e.mock.On("CreateCaseStub", ctx, set)}
}

func (_c *mockSiriusService_CreateCaseStub_Call) Run(run func(ctx context.Context, set *types.BaseSet)) *mockSiriusService_CreateCaseStub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *types.BaseSet
		if args[1] != nil {
			arg1 = args[1].(*types.BaseSet)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *mockSiriusService_CreateCaseStub_Call) Return(scannedCaseResponse *sirius.ScannedCaseResponse, err error) *mockSiriusService_CreateCaseStub_Call {
	_c.Call.Return(scannedCaseResponse, err)
	return _c
}

func (_c *mockSiriusService_CreateCaseStub_Call) RunAndReturn(run func(ctx context.Context, set *types.BaseSet) (*sirius.ScannedCaseResponse, error)) *mockSiriusService_CreateCaseStub_Call {
	_c.Call.Return(run)
	return _c
}
